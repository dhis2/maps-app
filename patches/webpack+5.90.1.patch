diff --git a/node_modules/webpack/lib/webworker/ImportScriptsChunkLoadingRuntimeModule.js b/node_modules/webpack/lib/webworker/ImportScriptsChunkLoadingRuntimeModule.js
index a17b92b..308d7a6 100644
--- a/node_modules/webpack/lib/webworker/ImportScriptsChunkLoadingRuntimeModule.js
+++ b/node_modules/webpack/lib/webworker/ImportScriptsChunkLoadingRuntimeModule.js
@@ -88,6 +88,20 @@ class ImportScriptsChunkLoadingRuntimeModule extends RuntimeModule {
 		const stateExpression = withHmr
 			? `${RuntimeGlobals.hmrRuntimeStatePrefix}_importScripts`
 			: undefined;
+
+        const outputName = compilation.getPath(
+			getChunkFilenameTemplate(chunk, compilation.outputOptions),
+			{
+				chunk,
+				contentHashType: "javascript"
+			}
+		);
+		const rootOutputDir = getUndoPath(
+			outputName,
+			/** @type {string} */ (compilation.outputOptions.path),
+			true
+		);
+
 		const runtimeTemplate = compilation.runtimeTemplate;
 		const { _withCreateScriptUrl: withCreateScriptUrl } = this;
 
@@ -145,8 +159,8 @@ class ImportScriptsChunkLoadingRuntimeModule extends RuntimeModule {
 											Template.indent(
 												`importScripts(${
 													withCreateScriptUrl
-														? `${RuntimeGlobals.createScriptUrl}(${RuntimeGlobals.publicPath} + ${RuntimeGlobals.getChunkScriptFilename}(chunkId))`
-														: `${RuntimeGlobals.publicPath} + ${RuntimeGlobals.getChunkScriptFilename}(chunkId)`
+														? `${RuntimeGlobals.createScriptUrl}(${rootOutputDir} + ${RuntimeGlobals.getChunkScriptFilename}(chunkId))`
+														: `${rootOutputDir} + ${RuntimeGlobals.getChunkScriptFilename}(chunkId)`
 												});`
 											),
 											"}"
@@ -186,8 +200,8 @@ class ImportScriptsChunkLoadingRuntimeModule extends RuntimeModule {
 							"// start update chunk loading",
 							`importScripts(${
 								withCreateScriptUrl
-									? `${RuntimeGlobals.createScriptUrl}(${RuntimeGlobals.publicPath} + ${RuntimeGlobals.getChunkUpdateScriptFilename}(chunkId))`
-									: `${RuntimeGlobals.publicPath} + ${RuntimeGlobals.getChunkUpdateScriptFilename}(chunkId)`
+									? `${RuntimeGlobals.createScriptUrl}(${rootOutputDir} + ${RuntimeGlobals.getChunkUpdateScriptFilename}(chunkId))`
+									: `${rootOutputDir} + ${RuntimeGlobals.getChunkUpdateScriptFilename}(chunkId)`
 							});`,
 							'if(!success) throw new Error("Loading update chunk failed for unknown reason");'
 						]),
@@ -224,7 +238,7 @@ class ImportScriptsChunkLoadingRuntimeModule extends RuntimeModule {
 							RuntimeGlobals.hmrDownloadManifest
 						} = ${runtimeTemplate.basicFunction("", [
 							'if (typeof fetch === "undefined") throw new Error("No browser support: need fetch API");',
-							`return fetch(${RuntimeGlobals.publicPath} + ${
+							`return fetch(${rootOutputDir} + ${
 								RuntimeGlobals.getUpdateManifestFilename
 							}()).then(${runtimeTemplate.basicFunction("response", [
 								"if(response.status === 404) return; // no update available",
