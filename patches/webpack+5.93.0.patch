diff --git a/node_modules/webpack/lib/webworker/ImportScriptsChunkLoadingRuntimeModule.js b/node_modules/webpack/lib/webworker/ImportScriptsChunkLoadingRuntimeModule.js
index d290c42..a87b524 100644
--- a/node_modules/webpack/lib/webworker/ImportScriptsChunkLoadingRuntimeModule.js
+++ b/node_modules/webpack/lib/webworker/ImportScriptsChunkLoadingRuntimeModule.js
@@ -92,7 +92,20 @@ class ImportScriptsChunkLoadingRuntimeModule extends RuntimeModule {
 		const runtimeTemplate = compilation.runtimeTemplate;
 		const { _withCreateScriptUrl: withCreateScriptUrl } = this;
 
-		return Template.asString([
+ 		const outputName = compilation.getPath(
+ 			getChunkFilenameTemplate(chunk, compilation.outputOptions),
+ 			{
+ 				chunk,
+ 				contentHashType: "javascript"
+ 			}
+ 		);
+ 		const rootOutputDir = JSON.stringify(getUndoPath(
+ 			outputName,
+ 			compilation.outputOptions.path,
+ 			true
+ 		));
+
+ 		return Template.asString([
 			withBaseURI ? this._generateBaseUri(chunk) : "// no baseURI",
 			"",
 			"// object to store loaded chunks",
@@ -146,8 +159,8 @@ class ImportScriptsChunkLoadingRuntimeModule extends RuntimeModule {
 											Template.indent(
 												`importScripts(${
 													withCreateScriptUrl
-														? `${RuntimeGlobals.createScriptUrl}(${RuntimeGlobals.publicPath} + ${RuntimeGlobals.getChunkScriptFilename}(chunkId))`
-														: `${RuntimeGlobals.publicPath} + ${RuntimeGlobals.getChunkScriptFilename}(chunkId)`
+														? `${RuntimeGlobals.createScriptUrl}(${rootOutputDir} + ${RuntimeGlobals.getChunkScriptFilename}(chunkId))`
+														: `${rootOutputDir} + ${RuntimeGlobals.getChunkScriptFilename}(chunkId)`
 												});`
 											),
 											"}"
@@ -187,8 +200,8 @@ class ImportScriptsChunkLoadingRuntimeModule extends RuntimeModule {
 							"// start update chunk loading",
 							`importScripts(${
 								withCreateScriptUrl
-									? `${RuntimeGlobals.createScriptUrl}(${RuntimeGlobals.publicPath} + ${RuntimeGlobals.getChunkUpdateScriptFilename}(chunkId))`
-									: `${RuntimeGlobals.publicPath} + ${RuntimeGlobals.getChunkUpdateScriptFilename}(chunkId)`
+									? `${RuntimeGlobals.createScriptUrl}(${rootOutputDir} + ${RuntimeGlobals.getChunkUpdateScriptFilename}(chunkId))`
+									: `${rootOutputDir} + ${RuntimeGlobals.getChunkUpdateScriptFilename}(chunkId)`
 							});`,
 							'if(!success) throw new Error("Loading update chunk failed for unknown reason");'
 						]),
@@ -225,7 +238,7 @@ class ImportScriptsChunkLoadingRuntimeModule extends RuntimeModule {
 							RuntimeGlobals.hmrDownloadManifest
 						} = ${runtimeTemplate.basicFunction("", [
 							'if (typeof fetch === "undefined") throw new Error("No browser support: need fetch API");',
-							`return fetch(${RuntimeGlobals.publicPath} + ${
+							`return fetch(${rootOutputDir} + ${
 								RuntimeGlobals.getUpdateManifestFilename
 							}()).then(${runtimeTemplate.basicFunction("response", [
 								"if(response.status === 404) return; // no update available",
